#  MIT Licence
#  Copyright (c) 2023 Asger Jon Vistisen

# Generated by CodiumAI

import unittest

from worktoy.worktype import TypeNameSpace
import os


class TestTypeNameSpace(unittest.TestCase):

  #  Tests that an instance of TypeNameSpace can be created with a valid
  #  name and bases tuple.
  def test_create_instance_valid_name_bases(self):
    """
    Test that an instance of TypeNameSpace can be created with a valid
    name and bases tuple.
    """
    # Arrange
    name = "TestName"
    bases = (object,)

    # Act
    namespace = TypeNameSpace(name, bases)

    # Assert
    self.assertIsInstance(namespace, TypeNameSpace)
    self.assertEqual(namespace._className, name)
    self.assertEqual(namespace._bases, bases)

  #  Tests that an attribute can be added to the TypeNameSpace instance
  #  using the _explicitSetter method.
  def test_add_attribute_explicitSetter(self):
    """
    Test that an attribute can be added to the TypeNameSpace instance
    using the _explicitSetter method.
    """
    # Arrange
    namespace = TypeNameSpace("TestName", (object,))
    key = "attribute"
    value = "value"

    # Act
    namespace._explicitSetter(key, value)

    # Assert
    self.assertEqual(namespace._contents[key], value)

  #  Tests that an attribute can be retrieved from the TypeNameSpace
  #  instance using the _explicitGetter method.
  def test_retrieve_attribute_explicitGetter(self):
    """
    Test that an attribute can be retrieved from the TypeNameSpace
    instance using the _explicitGetter method.
    """
    # Arrange
    namespace = TypeNameSpace("TestName", (object,))
    key = "attribute"
    value = "value"
    namespace._explicitSetter(key, value)

    # Act
    result = namespace._explicitGetter(key)

    # Assert
    self.assertEqual(result, value)

  #  Tests that an attribute can be deleted from the TypeNameSpace
  #  instance using the _explicitDeleter method.
  def test_delete_attribute_explicitDeleter(self):
    """
    Test that an attribute can be deleted from the TypeNameSpace instance
    using the _explicitDeleter method.
    """
    # Arrange
    namespace = TypeNameSpace("TestName", (object,))
    key = "attribute"
    value = "value"
    namespace._explicitSetter(key, value)

    # Act
    namespace._explicitDeleter(key)

    # Assert
    with self.assertRaises(KeyError):
      namespace._explicitGetter(key)

  #  Tests that the keys method can be called on the TypeNameSpace instance.
  def test_call_keys_method(self):
    """
    Test that the keys method can be called on the TypeNameSpace instance.
    """
    # Arrange
    namespace = TypeNameSpace("TestName", (object,))
    key = "attribute"
    value = "value"
    namespace._explicitSetter(key, value)

    # Act
    result = namespace.keys()

    # Assert
    self.assertEqual(list(result), [key])

  #  Tests that the values method can be called on the TypeNameSpace
  #  instance.
  def test_call_values_method(self):
    """
    Test that the values method can be called on the TypeNameSpace instance.
    """
    # Arrange
    namespace = TypeNameSpace("TestName", (object,))
    key = "attribute"
    value = "value"
    namespace._explicitSetter(key, value)

    # Act
    result = namespace.values()

    # Assert
    self.assertEqual(list(result), [value])

  #  Tests that the items method can be called on the TypeNameSpace instance.
  def test_call_items_method(self):
    """
    Test that the items method can be called on the TypeNameSpace instance.
    """
    # Arrange
    namespace = TypeNameSpace("TestName", (object,))
    key = "attribute"
    value = "value"
    namespace._explicitSetter(key, value)

    # Act
    result = namespace.items()

    # Assert
    self.assertEqual(list(result), [(key, value)])

  #  Tests that the TypeNameSpace instance can be iterated over using a
  #  for loop.
  def test_iterate_over_instance(self):
    """
    Test that the TypeNameSpace instance can be iterated over using a for
    loop.
    """
    # Arrange
    namespace = TypeNameSpace("TestName", (object,))
    keys = ["attribute1", "attribute2", "attribute3"]
    values = ["value1", "value2", "value3"]
    for key, value in zip(keys, values):
      namespace._explicitSetter(key, value)

    # Act
    result = [key for key in namespace]

    # Assert
    self.assertEqual(result, keys)

  #  Tests that a TypeError is raised when trying to create an instance of
  #  TypeNameSpace with an invalid name and bases tuple.
  def test_create_instance_invalid_name_bases(self):
    """
    Test that a TypeError is raised when trying to create an instance of
    TypeNameSpace with an invalid name and bases tuple.
    """
    # Arrange
    name = 123
    bases = "invalid"

    # Act & Assert
    with self.assertRaises(TypeError):
      TypeNameSpace(name, bases)

  #  Tests that a KeyError is raised when trying to retrieve a
  #  non-existent attribute from the TypeNameSpace instance using the
  #  _explicitGetter method.
  def test_retrieve_nonexistent_attribute_explicitGetter(self):
    """
    Test that a KeyError is raised when trying to retrieve a non-existent
    attribute from the TypeNameSpace instance using the _explicitGetter
    method.
    """
    # Arrange
    namespace = TypeNameSpace("TestName", (object,))
    key = "nonexistent"

    # Act & Assert
    with self.assertRaises(KeyError):
      namespace._explicitGetter(key)
